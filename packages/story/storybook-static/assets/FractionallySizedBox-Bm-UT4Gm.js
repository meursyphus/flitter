var c=Object.defineProperty;var l=(s,e,t)=>e in s?c(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var r=(s,e,t)=>(l(s,typeof e!="symbol"?e+"":e,t),t);import{u as g,d,v as F,w as u,b as w,x as m,y as f}from"./Widget-Dxvrat1N.js";class x extends g{constructor({child:t,widthFactor:i,heightFactor:h,alignment:n=d.center,key:o}){super({child:t,key:o});r(this,"widthFactor");r(this,"heightFactor");r(this,"alignment");this.alignment=n,this.widthFactor=i,this.heightFactor=h}createRenderObject(){return new z({alignment:this.alignment,widthFactor:this.widthFactor,heightFactor:this.heightFactor})}updateRenderObject(t){t.alignment=this.alignment,t.widthFactor=this.widthFactor,t.heightFactor=this.heightFactor}}class z extends F{constructor({alignment:t,widthFactor:i,heightFactor:h}){super({alignment:t,textDirection:u.ltr});r(this,"_widthFactor");r(this,"_heightFactor");if(i!=null&&i<0)throw new Error("widthFactor must be greater than zero");if(h!=null&&h<0)throw new Error("heightFactor must be greater than zero");this._widthFactor=i,this._heightFactor=h}get widthFactor(){return this._widthFactor}set widthFactor(t){this._widthFactor!==t&&(this._widthFactor=t,this.markNeedsLayout())}get heightFactor(){return this._heightFactor}set heightFactor(t){this._heightFactor!==t&&(this._heightFactor=t,this.markNeedsLayout())}getInnerConstraints(t){let{minHeight:i,maxHeight:h,maxWidth:n,minWidth:o}=t;if(this.widthFactor!=null){const a=this.widthFactor*n;o=a,n=a}if(this.heightFactor!=null){const a=this.heightFactor*h;i=a,h=a}return new w({maxHeight:h,maxWidth:n,minHeight:i,minWidth:o})}preformLayout(){this.child!=null?(this.child.layout(this.getInnerConstraints(this.constraints)),this.size=this.constraints.constrain(this.child.size),this.alignChild()):this.size=this.constraints.constrain(this.getInnerConstraints(this.constraints).constrain(m.zero))}getIntrinsicHeight(t){let i;return this.child==null?i=super.getIntrinsicHeight(t):i=this.child.getIntrinsicHeight(t*(this.widthFactor??1)),i/(this.heightFactor??1)}getIntrinsicWidth(t){let i;return this.child==null?i=super.getIntrinsicWidth(t):i=this.child.getIntrinsicWidth(t*(this.heightFactor??1)),i/(this.widthFactor??1)}}const p=f(x);export{p as F};
