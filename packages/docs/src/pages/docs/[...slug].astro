---
import Layout from "../../layouts/DocsLayout.astro";
import SideBar from "../../components/pages/docs/SideBar.astro";
import Toc from "../../components/pages/docs/Toc.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const docsEntries = await getCollection("docs");

  return docsEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();
const docsEntries = await getCollection("docs");

// docsEntries를 nav_group_order와 nav_order를 기준으로 정렬
const sortedEntries = docsEntries.sort((a, b) => {
  const groupOrderDiff = a.data.nav_group_order - b.data.nav_group_order;
  if (groupOrderDiff === 0) {
    // 같은 그룹 내에서는 nav_order를 기준으로 정렬
    return a.data.nav_order - b.data.nav_order;
  }
  return groupOrderDiff;
});
// 현재 entry의 인덱스 찾기
const currentIndex = sortedEntries.findIndex((it) => it.slug === entry.slug);

// 이전 및 다음 entry 찾기
const prevEntry = currentIndex > 0 ? sortedEntries[currentIndex - 1] : null;
const nextEntry =
  currentIndex < sortedEntries.length - 1
    ? sortedEntries[currentIndex + 1]
    : null;
---

<Layout title="Docs">
  <main class="flex relative mx-auto">
    <SideBar />
    <div class="w-full px-8 prose max-w-full lg:prose-lg py-20">
      <Content />
      <div class="flex">
        {
          prevEntry && (
            <a href={`/docs/${prevEntry.slug}`}>{prevEntry.data.nav_title}</a>
          )
        }
        {
          nextEntry && (
            <a href={`/docs/${nextEntry.slug}`}>{nextEntry.data.nav_title}</a>
          )
        }
      </div>
    </div>
    <Toc headings={headings} />
  </main>
</Layout>

<style>
  main {
  }
</style>

<style is:global>
</style>
